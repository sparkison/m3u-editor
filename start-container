#!/usr/bin/env bash

# Get/set runtime environment variables
export PUID="${PUID:-1000}" # NOT CURRENTLY USED...
export PGID="${PGID:-1000}" # NOT CURRENTLY USED...

# Set Redis server port
export REDIS_SERVER_PORT="${REDIS_SERVER_PORT:-36790}" # Default 36790

# Run NGINX/FPM as root
export FPMUSER="root"
export FPMGROUP="root"
export FPMPORT="${FPMPORT:-9900}" # Default 9900


# NOTE: Nginx, Postgres and Redis are no longer started inside this container.
# These services should be provided by separate containers in your compose
# stack. Keep DB/REDIS environment variables configured to point to the
# external services (DB_HOST, REDIS_HOST, etc.).

# Run PHP as root (or m3ue)
export SUPERVISOR_PHP_USER="root"

# Application URL and port
export APP_URL="${APP_URL:-http://localhost}"
export APP_PORT="${APP_PORT:-36400}" # Default 36400

# Websockets
export REVERB_PORT="${REVERB_PORT:-36800}" # Default 36800

# REVERB_APP_KEY is fixed for now so we can pre-compile assets on build
# See resources/js/echo.js and config/broadcasting.php

# Using reverse proxy, port not needed in client
if [ -z "$REVERB_APP_ID" ]; then
    # Generate random app id if not set
    export REVERB_APP_ID=$(openssl rand -hex 12)
fi
if [ -z "$REVERB_APP_SECRET" ]; then
    # Generate random app secret if not set
    export REVERB_APP_SECRET=$(openssl rand -hex 24)
fi

# Set timezone, default to UTC
export TZ="${TZ:-UTC}"
export APP_TIMEZONE="${TZ}"

# Define the php-fpm command (add "-R" flag to allow php-fpm to run as root)
export SUPERVISOR_PHP_COMMAND="/usr/sbin/php-fpm84 -F -R"

# The queue and websockets
export QUEUE_PHP_COMMAND="/usr/bin/php /var/www/html/artisan horizon"
export WEBSOCKET_PHP_COMMAND="/usr/bin/php /var/www/html/artisan reverb:start --host=0.0.0.0 --port=$REVERB_PORT --no-interaction --no-ansi"

# Make sure the laravel project is installed
if [ ! -f "artisan" ]; then
    echo "Laravel artisan not found! Make sure project is installed."
    exit 1
fi

# Update template files with variable values
if [ -f /etc/php84/php-fpm.d/www.tmpl ]; then
    # Variables set in container
    envsubst '${FPMUSER} ${FPMGROUP} ${FPMPORT}' < /etc/php84/php-fpm.d/www.tmpl > /etc/php84/php-fpm.d/www.conf
fi

if [[ "$APP_URL" == *"https"* ]]; then
    echo "‚ö°Ô∏è Starting app at: $APP_URL"
else
    echo "‚ö°Ô∏è Starting app at: $APP_URL:$APP_PORT"
fi

# Check for configuration directories and files
config_dir="/var/www/config"
env_file="${config_dir}/env"
db_dir="${config_dir}/database"
db_file="${db_dir}/database.sqlite"
db_file_jobs="${db_dir}/jobs.sqlite"
epg_dir="${config_dir}/epg"
epg_cache_dir="${config_dir}/epg-cache"
logo_cache_dir="${config_dir}/cached-logos"
playlist_dir="${config_dir}/playlist"
playlist_epg_dir="${config_dir}/playlist-epg-files"
backup_dir="${config_dir}/m3u-editor-backups"
log_dir="${config_dir}/logs"
queue_log_file="${log_dir}/queue.log"
websockets_log_file="${log_dir}/websocket.log"
laravel_log_file="${log_dir}/laravel.log"
ffmpeg_log_file="${log_dir}/ffmpeg.log"
nginx_log_file="${log_dir}/nginx.log"
startup_log_file="${log_dir}/startup.log"

# Set log directory variable
export LOG_DIR="${log_dir}"

# Invalid log files, or files that will be created by the app
swoole_log_file="${log_dir}/swoole_http.log"
reverb_log_file="${log_dir}/reverb.log"
horizon_log_file="${log_dir}/horizon.log"

# Setup timezone
if [ -f "/etc/localtime" ]; then
    rm /etc/localtime
fi
cp "/usr/share/zoneinfo/$TZ" /etc/localtime
echo "$TZ" > /etc/timezone
echo "üìÖ Timezone set to $TZ. Current date/time: $(date)"
echo ""

# Create config directories if needed
if [ ! -d "${config_dir}" ]; then
    echo "-- Missing config directory - please link a director to '/var/www/config' in the container for data persitence"
    exit 0
fi
[ ! -d "${db_dir}" ] && mkdir -p "${db_dir}"
[ ! -d "${epg_dir}" ] && mkdir -p "${epg_dir}"
[ ! -d "${epg_cache_dir}" ] && mkdir -p "${epg_cache_dir}"
[ ! -d "${logo_cache_dir}" ] && mkdir -p "${logo_cache_dir}"
[ ! -d "${playlist_dir}" ] && mkdir -p "${playlist_dir}"
[ ! -d "${playlist_epg_dir}" ] && mkdir -p "${playlist_epg_dir}"
[ ! -d "${backup_dir}" ] && mkdir -p "${backup_dir}"
[ ! -d "${log_dir}" ] && mkdir -p "${log_dir}"

# Create environment file if missing
if [ ! -f "${env_file}" ]; then
    echo "-- Missing environment file, creating now..."
    cp /var/www/html/.env.example "${env_file}"
fi

# Create database files if missing
[ ! -f "${db_file}" ] && touch "${db_file}"
[ ! -f "${db_file_jobs}" ] && touch "${db_file_jobs}"

# Create log files
[ ! -f "${queue_log_file}" ] && touch "${queue_log_file}"
[ ! -f "${websockets_log_file}" ] && touch "${websockets_log_file}"

# Clear out the log content (could build up over time, clean on container reboot)
echo "" > "/var/log/cron.out.log"
echo "" > "/var/log/cron.err.log"
echo "" > "${queue_log_file}"
echo "" > "${websockets_log_file}"

# Cleanup
[ -f "${swoole_log_file}" ] && rm -f "${swoole_log_file}"
[ -f "${reverb_log_file}" ] && rm -f "${reverb_log_file}"
[ -f "${horizon_log_file}" ] && rm -f "${horizon_log_file}"
[ -f "${laravel_log_file}" ] && rm -f "${laravel_log_file}"
[ -f "${ffmpeg_log_file}" ] && rm -f "${ffmpeg_log_file}"
[ -f "${nginx_log_file}" ] && rm -f "${nginx_log_file}"
[ -f "${startup_log_file}" ] && rm -f "${startup_log_file}"


# Link environment file
ln -sf "${env_file}" .env

# Link db files
ln -sf "${db_file}" "database/database.sqlite"
ln -sf "${db_file_jobs}" "database/jobs.sqlite"

# Link logs
rm -rf storage/logs
ln -sf "${log_dir}" storage/

# Link EPG, Playlist, Backups
[ ! -d "storage/app/private/epg" ] && ln -sf "${epg_dir}" storage/app/private/epg
[ ! -d "storage/app/private/epg-cache" ] && ln -sf "${epg_cache_dir}" storage/app/private/epg-cache
[ ! -d "storage/app/private/cached-logos" ] && ln -sf "${logo_cache_dir}" storage/app/private/cached-logos
[ ! -d "storage/app/private/playlist" ] && ln -sf "${playlist_dir}" storage/app/private/playlist
[ ! -d "storage/app/private/playlist-epg-files" ] && ln -sf "${playlist_epg_dir}" storage/app/private/playlist-epg-files
[ ! -d "storage/app/private/m3u-editor-backups" ] && ln -sf "${backup_dir}" storage/app/private/m3u-editor-backups

# Link Laravel storage
if [ ! -d "public/storage" ]; then
    php artisan storage:link
fi

# Set app key if not set
php artisan app:generate-key

# Check for updates
php artisan app:update-check

# Optimize Laravel
php artisan optimize

# Optimize Filament
php artisan filament:optimize

# Make sure app is "up"
php artisan up

# Set Sqlite WAL mode
echo "üóÇÔ∏è Enabling SQLite WAL mode..."

# Enable WAL on SQLite databases
#php artisan sqlite:wal-enable sqlite # Ignoring for now
php artisan sqlite:wal-enable jobs
echo ""

# Wait for dependent services (DB/Redis) to become reachable before running
# migrations and starting supervisor. Uses bash /dev/tcp to test TCP connectivity.
wait_for_tcp() {
    host="$1"
    port="$2"
    timeout=${3:-60}
    echo "‚è≥ Waiting for $host:$port (timeout ${timeout}s)"
    start=$(date +%s)
    while true; do
        if bash -c "</dev/tcp/${host}/${port}" >/dev/null 2>&1; then
            echo "‚úÖ $host:$port is reachable"
            return 0
        fi
        now=$(date +%s)
        if [ $((now - start)) -ge $timeout ]; then
            echo "‚ö†Ô∏è  Timed out waiting for $host:$port after ${timeout}s"
            return 1
        fi
        sleep 1
    done
}

# Wait for Postgres (if using pgsql)
if [ "${DB_CONNECTION:-}" = "pgsql" ]; then
    DB_HOST=${DB_HOST:-postgres}
    DB_PORT=${DB_PORT:-${PG_PORT:-54320}}
    wait_for_tcp "$DB_HOST" "$DB_PORT" 60 || echo "Warning: Postgres not reachable at $DB_HOST:$DB_PORT"
    echo ""
fi

# Wait for Redis if configured
if [ -n "${REDIS_HOST:-}" ]; then
    REDIS_HOST=${REDIS_HOST:-redis}
    REDIS_PORT=${REDIS_PORT:-${REDIS_SERVER_PORT:-36790}}
    wait_for_tcp "$REDIS_HOST" "$REDIS_PORT" 30 || echo "Warning: Redis not reachable at $REDIS_HOST:$REDIS_PORT"
    echo ""
fi

# Run migrations
echo "üíæ Running migrations..."
php artisan migrate --force

# Ensure composer dir is writable
[ ! -d /.composer ] && mkdir /.composer
chmod -R ugo+rw /.composer

# If passed custom commands, execute them, else run supervisord
if [ $# -gt 0 ]; then
    if [ "$SUPERVISOR_PHP_USER" = "root" ]; then
        exec "$@"
    else
        su-exec $WWWUSER "$@"
    fi
else
    echo ""
    echo "üöÄ Starting services..."
    echo ""
    
    # Ensure supervisord log directory exists (some images don't create it)
    if [ ! -d "/var/log/supervisor" ]; then
        mkdir -p /var/log/supervisor || true
    fi
    # Ensure the supervisord logfile exists and is writable
    touch /var/log/supervisor/supervisord.log || true
    chmod a+rw /var/log/supervisor/supervisord.log || true

    # Start supervisord
    exec /usr/bin/supervisord -c /etc/supervisor/conf.d/supervisord.conf
fi
